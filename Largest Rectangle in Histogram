class Solution:
    def largestRectangleArea(self, heights: List[int]) -> int:
        
        # push elements onto the stack 
        # only push and pop elements once 
        # stack could be up until the size of the input array 
        # Time complexity: O(n)

        maxArea = 0
        stack = [] # pair: (index, height)

        for i, h in enumerate(heights): 
            start = i 
            while stack and stack[-1][1] > h:
                # if stack is not empty and top value of stack height is greater than the value we reached
                index, height = stack.pop()

                # check if the area popping could have been the max area rectangle 
                maxArea = max(maxArea, height * (i - index))

                start = index
            #When we add our pair to the stack 
            stack.append((start, h))

            #may still be entries in our stack left 
            #these were able to be extended to end of histogram so we need to compute heights 
        
        for i, h in stack: 
            maxArea = max(maxArea, h * (len(heights) - i))
        return maxArea 
