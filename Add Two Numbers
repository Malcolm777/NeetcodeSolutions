Edge cases: 
- 2 non empty linked lists representing the ints that we're adding together 
- 500 + ____ = 
- second number will never be empty 
- non-negative ints - 
- digits stored in reverse order 

For each digit we need a separate node 


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode()
        cur = dummy

        carry = 0
        while l1 or l2 or carry:
            v1 = l1.val if l1 else 0
            v2 = l2.val if l2 else 0

            # new digit
            val = v1 + v2 + carry
            carry = val // 10
            val = val % 10
            cur.next = ListNode(val)

            # update ptrs
            cur = cur.next
            l1 = l1.next if l1 else None
            l2 = l2.next if l2 else None

        return dummy.next


Dummy Node: Simplifies list construction by avoiding special cases for the head node.
Carry: Manages overflow from each digit addition.
Handling Unequal List Lengths: Default value 0 ensures no errors when one list is shorter than the other.


Instructions 
Initialize Dummy Node and Pointer:

Create a dummy node to simplify the construction of the resulting linked list.
Use a pointer (cur) to traverse and build the new list.
Initialize Carry:

Start with a carry value of 0 to handle sums greater than or equal to 10.
Iterate Through Both Lists:

Traverse the input linked lists (l1 and l2) as long as there are nodes to process or there is a carry value remaining.
Extract Node Values:

For each iteration, retrieve the current digit values from l1 and l2. If a list is shorter, assume its value is 0.
Calculate Sum and Update Carry:

Add the digit values and the carry.
Compute the new carry as the quotient of the sum divided by 10.
Determine the new digit as the remainder of the sum divided by 10.
Add New Node to Result List:

Create a new node with the calculated digit and attach it to the result list.
Move Pointers:

Advance the l1 and l2 pointers to their next nodes.
If a list is already exhausted, move to None.
Check for Remaining Carry:

If there is still a carry after processing both lists, create a final node to account for it.
Return Result:

Return the list starting from the node after the dummy node.
