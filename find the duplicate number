You are given an array of integers nums containing n + 1 integers. Each integer in nums is in the range [1, n] inclusive.

Every integer appears exactly once, except for one integer which appears two or more times. Return the integer that appears more than once.

Example 1:

Input: nums = [1,2,3,2,2]

Output: 2


Example 2:

Input: nums = [1,2,3,4,4]

Output: 4

class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        slow, fast = 0, 0
        while True:
            slow = nums[slow]
            fast = nums[nums[fast]]
            if slow == fast:
                break

        slow2 = 0
        while True:
            slow = nums[slow]
            slow2 = nums[slow2]
            if slow == slow2:
                return slow


Step-by-Step Explanation
1. Detect the Cycle (Tortoise and Hare Phase)
Initialization: Start with two pointers, slow and fast, both set to 0 (starting index).
Movement:
slow moves one step at a time: slow = nums[slow].
fast moves two steps at a time: fast = nums[nums[fast]].
Detection: The loop continues until slow and fast meet, which indicates the presence of a cycle.

2. Find the Entrance to the Cycle
Reset one pointer: Set slow2 to 0, while slow remains at the meeting point.
Movement:
Both slow and slow2 move one step at a time: slow = nums[slow] and slow2 = nums[slow2].
Detection: The loop continues until slow and slow2 meet again, which will happen at the duplicate number (the entrance to the cycle).

3. Return the Duplicate Number
When slow equals slow2, return either as the duplicate number.
