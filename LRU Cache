
class LRUCache:
    def __init__(self, capacity: int):
        self.cache = OrderedDict()  # Initialize an empty OrderedDict to store the cache
        self.capacity = capacity  # Set the maximum capacity of the cache

    def get(self, key: int) -> int:
        if key in self.cache:  # Check if the key exists in the cache
            self.cache.move_to_end(key)  # Move the key to the end to mark it as recently used
            return self.cache[key]  # Return the value associated with the key
        return -1  # Return -1 if the key is not in the cache

    def put(self, key: int, value: int) -> None:
        if key in self.cache:  # Check if the key already exists in the cache
            self.cache.move_to_end(key)  # Move the key to the end to mark it as recently used
        else:
            if len(self.cache) >= self.capacity:  # Check if the cache is at full capacity
                self.cache.popitem(last=False)  # Remove the least recently used item (first item)
        self.cache[key] = value  # Insert or update the value for the key in the cache




Doubly Linked List 
class Node:
    def __init__(self, key, val):
        self.key, self.val = key, val
        self.prev = self.next = None

class LRUCache:
    def __init__(self, capacity: int):
        self.cap = capacity
        self.cache = {}  # map key to node

        self.left, self.right = Node(0, 0), Node(0, 0)
        self.left.next, self.right.prev = self.right, self.left

    def remove(self, node):
        prev, nxt = node.prev, node.next
        prev.next, nxt.prev = nxt, prev

    def insert(self, node):
        prev, nxt = self.right.prev, self.right
        prev.next = nxt.prev = node
        node.next, node.prev = nxt, prev

    def get(self, key: int) -> int:
        if key in self.cache:
            self.remove(self.cache[key])
            self.insert(self.cache[key])
            return self.cache[key].val
        return -1

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            self.remove(self.cache[key])
        self.cache[key] = Node(key, value)
        self.insert(self.cache[key])

        if len(self.cache) > self.cap:
            lru = self.left.next
            self.remove(lru)
            del self.cache[lru.key]
