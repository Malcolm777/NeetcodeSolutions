
class LRUCache:
    def __init__(self, capacity: int):
        self.cache = OrderedDict()  # Initialize an empty OrderedDict to store the cache
        self.capacity = capacity  # Set the maximum capacity of the cache

    def get(self, key: int) -> int:
        if key in self.cache:  # Check if the key exists in the cache
            self.cache.move_to_end(key)  # Move the key to the end to mark it as recently used
            return self.cache[key]  # Return the value associated with the key
        return -1  # Return -1 if the key is not in the cache

    def put(self, key: int, value: int) -> None:
        if key in self.cache:  # Check if the key already exists in the cache
            self.cache.move_to_end(key)  # Move the key to the end to mark it as recently used
        else:
            if len(self.cache) >= self.capacity:  # Check if the cache is at full capacity
                self.cache.popitem(last=False)  # Remove the least recently used item (first item)
        self.cache[key] = value  # Insert or update the value for the key in the cache

