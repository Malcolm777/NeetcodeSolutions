/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    int res = Integer.MIN_VALUE; 
        //create our integer minimum value 
        // create a function to recursively call the root
        public int maxPathSum(TreeNode root) { 
            dfs(root); 
            return res; 
        }

        // with the split between child nodes 
        // create a function to get the max of the treeNode 
        private int getMax(TreeNode root) { 
            if (root == null) return 0; 
            int left = getMax(root.left); 
            int right = getMax(root.right); 
            int path = root.val + Math.max(left, right); 
            return Math.max(0, path);
        }

        // depth first search to get the maximum 
        private void dfs(TreeNode root) { 
            if (root == null) return; 
            int left = getMax(root.left); 
            int right = getMax(root.right); 
            res = Math.max(res, root.val + left + right); 
            dfs(root.left); 
            dfs(root.right); 
        }
    }

