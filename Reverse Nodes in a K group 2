Reverse Nodes in a K group 2

Time complexity: 
O(n)
Space complexity: 
0(1) 

class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        dummy = ListNode(0, head)
        groupPrev = dummy

        while True:
            kth = self.getKth(groupPrev, k)
            if not kth:
                break
            groupNext = kth.next

            prev, curr = kth.next, groupPrev.next
            while curr != groupNext:
                tmp = curr.next
                curr.next = prev
                prev = curr
                curr = tmp

            tmp = groupPrev.next
            groupPrev.next = kth
            groupPrev = tmp
        return dummy.next

    def getKth(self, curr, k):
        while curr and k > 0:
            curr = curr.next
            k -= 1
        return curr


Complexity: The time complexity of this approach is 
𝑂(𝑛)
O(n), where n is the number of nodes in the linked list. The space complexity is 
𝑂(1) or O(1) since we're reversing the links in place.

Edge Cases: Handle cases where the linked list is empty or has fewer than k nodes.
